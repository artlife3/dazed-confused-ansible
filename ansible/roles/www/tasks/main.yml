- name: Create admin folder
  file: path={{ httpd_document_root }}/admin
         state=directory
         owner={{ owner }}
         group={{ group }}
         mode=775
  tags: admin

- name: Existence of Bootstrap directory
  stat: path={{ httpd_document_root }}/admin/bootstrap
  register: bootstrap
  tags: admin

- name: Download bootstarp
  get_url: url="http://getbootstrap.com/2.3.2/assets/bootstrap.zip" dest={{ httpd_document_root }}/admin
  when: not bootstrap.stat.exists
  tags: admin

- name: Unarchive bootstrap.zip
  unarchive: src={{ httpd_document_root }}/admin/bootstrap.zip dest={{ httpd_document_root }}/admin/ remote_src=True
  when: not bootstrap.stat.exists
  tags: admin

- name: Remove bootstrap.zip
  file: path={{ httpd_document_root }}/admin/bootstrap.zip state=absent
  when: not bootstrap.stat.exists
  tags: admin

# admin/index.php

- name: Transfer admin page
  copy: src={{ templates_path }}/admin/index.php
        dest={{ httpd_document_root }}/admin/index.php
  tags: admin
 
#phpinfo

- name: Transfer phpinfo
  copy: src={{ templates_path }}/admin/phpinfo.php
        dest={{ httpd_document_root }}/admin/phpinfo.php
  tags: admin

# admin/memcache.php
- name: Transfer memcache.php
  copy: src={{ templates_path }}/admin/memcache.php
        dest={{ httpd_document_root }}/admin/memcache.php
  tags: admin

# admin/mail_test.php
- name: Transfer mail_test.php
  copy: src={{ templates_path }}/admin/mail_test.php
        dest={{ httpd_document_root }}/admin/mail_test.php
  tags: admin
 
# admin/mail-test.php
- name: Transfer mail-test.php
  copy: src={{ templates_path }}/admin/mail-test.php
        dest={{ httpd_document_root }}/admin/mail-test.php
  tags: admin

# Opcache
- name: Git clone opcache
  git: repo=https://github.com/rlerdorf/opcache-status.git
       dest={{ httpd_document_root }}/admin/opcache-status
 
# Apcu
- name: Git clone apcu
  git: repo=https://github.com/krakjoe/apcu.git
       dest={{ httpd_document_root }}/admin/apcu

# phpMemcacheAdmin
- name: Git clone phpMemcacheAdmin
  git: repo=https://github.com/elijaa/phpmemcacheadmin.git
       dest={{ httpd_document_root }}/admin/phpmemcacheadmin

# phpMyAdmin

- name: Existence of phpMyAdmin directory
  stat: path={{ httpd_document_root }}/admin/phpmyadmin
  register: phpmyadmin
  tags: admin

- name: Download phpMyAdmin
  get_url: url="https://files.phpmyadmin.net/phpMyAdmin/4.6.6/phpMyAdmin-4.6.6-all-languages.zip" dest={{ httpd_document_root }}/admin/ validate_certs=no
  when: not phpmyadmin.stat.exists
  tags: admin

- name: Unarchive phpMyAdmin-4.6.6-all-languages.zip
  unarchive: src={{ httpd_document_root }}/admin/phpMyAdmin-4.6.6-all-languages.zip dest={{ httpd_document_root }}/admin/ remote_src=True
  when: not phpmyadmin.stat.exists
  tags: admin

- name: Remove phpMyAdmin-4.6.6-all-languages.zip
  file: path={{ httpd_document_root }}/admin/phpMyAdmin-4.6.6-all-languages.zip state=absent
  when: not phpmyadmin.stat.exists
  tags: admin

- name: Create phpMyAdmin symbolic link
  file:
    src: "{{ httpd_document_root }}/admin/phpMyAdmin-4.6.6-all-languages"
    dest: "{{ httpd_document_root }}/admin/phpmyadmin"
    state: link
  when: not phpmyadmin.stat.exists
  tags: admin

# CMS Drupal7

- name: Existence of Drupal7 directory
  stat: path={{ httpd_document_root }}/drupal7
  register: drupal7
  tags: admin

#  mysql -u root -proot -e "CREATE DATABASE IF NOT EXISTS drupal7;"

- name: Download Drupal7
  get_url: url="https://ftp.drupal.org/files/projects/drupal-7.54.tar.gz" dest={{ httpd_document_root }}/
  when: not drupal7.stat.exists
  tags: admin

- name: Unarchive drupal-7.54.tar.gz
  unarchive: src={{ httpd_document_root }}/drupal-7.54.tar.gz dest={{ httpd_document_root }}/drupal7 remote_src=True
  when: not drupal7.stat.exists
  tags: admin

- name: Remove drupal-7.54.tar.gz
  file: path={{ httpd_document_root }}/drupal-7.54.tar.gz state=absent
  when: not drupal7.stat.exists
  tags: admin

#  cd $PATH_WWW/$DIR_HTML/$DIR
#  mkdir sites/default/files
#  sudo chmod g+w sites/default/files
#  cp sites/default/default.settings.php sites/default/settings.php
#  sudo chown -R vagrant:vagrant $PATH_WWW/$DIR_HTML/$DIR
#
#  cd profiles/standard/translations
#  wget -q http://ftp.drupal.org/files/translations/7.x/drupal/$DRUPAL.ja.po


# CMS Drupal8

- name: Existence of Drupal8 directory
  stat: path={{ httpd_document_root }}/drupal8
  register: drupal8
  tags: admin

#  mysql -u root -proot -e "CREATE DATABASE IF NOT EXISTS drupal8;"

- name: Download Drupal8
  get_url: url="https://ftp.drupal.org/files/projects/drupal-8.2.6.tar.gz" dest={{ httpd_document_root }}/
  when: not drupal8.stat.exists
  tags: admin

- name: Unarchive drupal-8.2.6.tar.gz
  unarchive: src={{ httpd_document_root }}/drupal-8.2.6.tar.gz dest={{ httpd_document_root }}/drupal8 remote_src=True
  when: not drupal8.stat.exists
  tags: admin

- name: Remove drupal-8.2.6.tar.gz
  file: path={{ httpd_document_root }}/drupal-8.2.6.tar.gz state=absent
  when: not drupal8.stat.exists
  tags: admin


#  cd $PATH_WWW/$DIR_HTML/$DIR
#  mkdir sites/default/files
#  sudo chmod g+w sites/default/files
#  cp sites/default/default.settings.php sites/default/settings.php
#  sudo chown -R vagrant:vagrant $PATH_WWW/$DIR_HTML/$DIR

# CMS Wordpress

- name: Existence of Wordpress directory
  stat: path={{ httpd_document_root }}/wordpress
  register: wordpress
  tags: admin

#  mysql -u root -proot -e "CREATE DATABASE IF NOT EXISTS wordpress;"

- name: Download Wordpress
  get_url: url="https://ja.wordpress.org/wordpress-4.7.2-ja.zip" dest={{ httpd_document_root }}/
  when: not wordpress.stat.exists
  tags: admin

- name: Unarchive wordpress-4.7.2-ja.zip
  unarchive: src={{ httpd_document_root }}/wordpress-4.7.2-ja.zip dest={{ httpd_document_root }}/wordpress remote_src=True
  when: not wordpress.stat.exists
  tags: admin

- name: Remove wordpress-4.7.2-ja.zip
  file: path={{ httpd_document_root }}/wordpress-4.7.2-ja.zip state=absent
  when: not wordpress.stat.exists
  tags: admin


#  sudo chown -R apache:vagrant $DIR

